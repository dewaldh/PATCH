1,"Patch DFC :DFCX1-142 on October   04,18 10: 58","ENG","1","","X3","3",
2,"TRT","BB_ENGINE_EXEC",""
#<AdxTL>@(#)0.0.0.0 $Revision$
# Script            : BB_ENGINGE_EXEC
# Creation date     : 02/10/2018
# Version           : 1.0.0
# Authors (Company) : DH (Leverage)
# Module            : Intercompany Engine (DFCX1-142)
#------------------------------------------------------------------------------------#
# Epic              : https://jira.leveragetech.com.au/browse/DFCX1-142
# Description       : Business Batch Engine (Validate; Post)
#                     Executed During Validation when writing to Simulation and Errors
#                     Executed During Post when creating Journal Entries
#------------------------------------------------------------------------------------#

$ACTION
  Case ACTION
    When Default
  Endcase
Return

#---------------------------------------------------------------------------------
# Cash
#---------------------------------------------------------------------------------
Subprog BT_CASH(BATNBR)
Variable Char BATNBR()

Local Char YERRMSG(255)

#FOREACH BUSINESS TRANSACTION LINE
If clalev([F:YBDT]) = 0 : Local File YBBDETAILTEM [YBDT]  : Endif
If clalev([F:BAN]) = 0  : Local File BANK         [BAN]   : Endif
Local Integer I : I = 0
  For [F:YBDT] Where [F:YBDT]YBATNBR = BATNBR
    # If THE BANK Field IS POPULATED
    If [F:YBDT]YBAN <> "" Then
      Read [F:BAN]BAN0 = [F:YBDT]YBAN
      If [F:BAN]YBANPRNSTA = 2 Then #Principal Bank Account
        #CREATE SIMULATION LINE For THE PRINCIPAL BANK ON THE CURRENT BUSINESS TRANSACTION LINE
        #(DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
        I = [F:YBBS]YDETLIG
        Call ADDLIG_SIM([F:YBBS]YBATNBR,I,[F:YBBS]YENTTYP,[F:YBBS]YJOU,[F:YBBS]YTRANSNBR,
& [F:YBBS]YDETDES,[F:YBBS]YFCY,[F:YBBS]YCOA,[F:YBBS]YACC,[F:YBBS]YLIGDES,[F:YBBS]YCTRL,
& [F:YBBS]YBP,[F:YBBS]YDEB,[F:YBBS]YCDT,[F:YBBS]YTAX,[F:YBBS]YREF,[F:YBBS]YPJT)
        If fstat <> 0 Then
          GMESSAGE = "Principal Bank Account"
        Endif
      Elsif [F:BAN]YBANPRNSTA = 1 Then #Shared Bank Accounts

      Endif
    Else
      Call ADDLIG_SIM([F:YBBS]YBATNBR,I,[F:YBBS]YENTTYP,[F:YBBS]YJOU,[F:YBBS]YTRANSNBR,
& [F:YBBS]YDETDES,[F:YBBS]YFCY,[F:YBBS]YCOA,[F:YBBS]YACC,[F:YBBS]YLIGDES,YERRMSG)
    Endif
  Next

#CREATE SIMULATION LINE For THE PRINCIPAL BANK ON THE CURRENT BUSINESS TRANSACTION LINE (DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
#    Else (BANK IS A SHARED BANK ACCOUNT)
#
#      GET THE LINKED ELA POINTED To By THE BANK ON THE CURRENT BUSINESS TRANSACTION LINE As THE CURRENT ELA
#
#      Using THE CURRENT ELA
#        CREATE SIMULATION LINE For THE RECIPIENT COMPANY (DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
#        CREATE SIMULATION LINE For THE PROVIDER COMPANY (DR/CR SAME As THE CURRENT BUSINESS TRANSACTION LINE)
#
#      While THE SOURCE LOAN AGREEMENT ON THE CURRENT ELA IS POPULATED
#        GET THE SOURCE LOAN AGREEMENT As THE CURRENT ELA
#        Using THE CURRENT ELA
#CREATE SIMULATION LINE For THE RECIPIENT COMPANY (DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
#          CREATE SIMULATION LINE For THE PROVIDER COMPANY (DR/CR SAME As THE CURRENT BUSINESS TRANSACTION LINE)
#      ENDWHILE
#
#      FOLLOW THE BANK LINKED LIST Until A PRINCIPAL BANK IS FOUND
#      CREATE SIMULATION LINE For THE PRINCIPAL BANK (DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
#
#      If THE OWNER COMPANY OF THE PRINCIPAL BANK IS not SAME As THE PROVIDER COMPANY ON THE Last ELA Then
#        log AN ERROR For THE BUSINESS TRANSACTION LINE
#      Endif
#
#    Endif
#Endif
#  ENDFOR
#
#  INSERT SIMULATION LINES INTO SIMULATION TABLE.
#  INSERT ERRORS LINES INTO ERROR TABLE.
#
#End

End

#---------------------------------------------------------------------------------
# Inter Company
#---------------------------------------------------------------------------------
Subprog BT_IE(BATNBR)
Variable Char BATNBR()

End

#---------------------------------------------------------------------------------
# Journal
#---------------------------------------------------------------------------------
Subprog BT_JOURNAL(BATNBR)
Variable Char BATNBR()

End

#---------------------------------------------------------------------------------
# Simulation Line Write
#---------------------------------------------------------------------------------
Subprog ADDLIG_SIM(YBATNBR,YDETLIG, YENTTYP,YJOU,YTRANSNBR,YDETDES,YFCY,YCOA,YACC,YLIGDES,YCTRL,YBP,YDEB,YCDT,YTAX,YREF,YPJT)
Variable Char YBATNBR()
Variable Integer YDETLIG()
Variable Char YENTTYP()
Variable Char YJOU()
Variable Integer YTRANSNBR()
Variable Char YDETDES()
Variable Char YFCY()
Variable Char YCOA()
Variable Char YACC()
Variable Char YLIGDES()
Variable Char YCTRL()
Variable Char YBP()
Variable Decimal YDEB()
Variable Decimal YCDT()
Variable Char YTAX()
Variable Char YREF()
Variable Char YPJT()

#Open Tables
If clalev([F:YBBS]) = 0 : Local File YBBSIM [YBBS]  : Endif
Raz [F:YBBS]
[F:YBBS]YBATNBR = YBATNBR
[F:YBBS]YDETLIG = YDETLIG
[F:YBBS]YENTTYP = YENTTYP
[F:YBBS]YJOU = YJOU
[F:YBBS]YTRANSNBR = YTRANSNBR
[F:YBBS]YDETDES = YDETDES
[F:YBBS]YFCY = YFCY
[F:YBBS]YCOA = YCOA
[F:YBBS]YACC = YACC
[F:YBBS]YLIGDES = YLIGDES
[F:YBBS]YCTRL = YCTRL
[F:YBBS]YBP = YBP
[F:YBBS]YDEB = YDEB
[F:YBBS]YCDT = YCDT
[F:YBBS]YTAX = YTAX
[F:YBBS]YREF = YREF
[F:YBBS]YPJT = YPJT
Write [F:YBBS]

End

Subprog ADDLIG_ERR(YBATNBR,YSRC,YDETLIG,YFCY,YENTTYP,YJOU,YDETDES,YACC,YLIGDES,YMESS)
Variable Char YBATNBR()
Variable Char YSRC()
Variable Integer YDETLIG()
Variable Char YFCY()
Variable Char YENTTYP()
Variable Char YJOU()
Variable Char YDETDES()
Variable Char YACC()
Variable Char YLIGDES()
Variable Char YMESS()

If clalev([F:YBBE]) = 0 : Local File YBBERR [F:YBBE]  : Endif
Raz [F:YBBE]
[F:YBBE]YBATNBR = YBATNBR
[F:YBBE]YSRC = YSRC
[F:YBBE]YDETLIG = YDETLIG
[F:YBBE]YFCY = YFCY
[F:YBBE]YENTTYP = YENTTYP
[F:YBBE]YJOU = YJOU
[F:YBBE]YDETDES = YDETDES
[F:YBBE]YACC = YACC
[F:YBBE]YLIGDES = YLIGDES
[F:YBBE]YMESS = YMESS
Write [F:YBBE]

End

**********
7,"TRT","BB_ENGINE_EXEC",""
2,"TRT","SPEYBBVAL",""
#<AdxTL>@(#)0.0.0.0 $Revision$
######################################################################################################
# FILE NAME   : SPEYBBVAL
# DESCRIPTION : Business Batch Validation
######################################################################################################
# DATE        : 11-09-2018
# AUTHOR      : Dewald Henning
# COMPANY     : Leverage Technologies
#-----------------------------------------------------------------------------------------------------
# Epics Code  : DFCX1-27
#-----------------------------------------------------------------------------------------------------
######################################################################################################

$ACTION
  Case ACTION
    When "YBBVAL"  :   Gosub VALIDATE
    When "YBBPST"  :   Gosub POST
    When Default
  Endcase
Return

$VALIDATE
Local Char MESSAGE(255) : MESSAGE = "Validate business batch "-[M:YBB0]YBATNBR+"?"
  Call OUINON(MESSAGE,OK)  From GESECRAN
  Case OK
     When 2: Call VAL_BUSBAT([M:YBB0]YBATNBR)  #yes
  Endcase

Return

$POST
Local Char MESSAGE(255) : MESSAGE = "Post business batch "-[M:YBB0]YBATNBR-" to journals?"
  Call OUINON(MESSAGE,OK)  From GESECRAN
  Case OK
     When 2: Goto PST_BUSBAT  #yes
  Endcase

Return

Subprog VAL_BUSBAT(VALEUR)
Variable Char VALEUR

  #Check if the Business Batch is a template
  If left$(VALEUR,1) = "T"
    GMESSAGE = mess(16,6254,1)
    End
  Endif
  # Delete ALL RECORDS IN THE SIMULATION TABLE and ERRORS TABLE
  If clalev([F:YBBS]) = 0 : Local File YBBSIM [YBBS] : Endif
  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE] : Endif
  Delete [F:YBBS] Where [F:YBBS]YBATNBR = VALEUR
  Delete [F:YBBE] Where [F:YBBE]YBATNBR = VALEUR

  #SORT BUSINES TRANSACTIONS LINES By TRANSACTION NO and Then SITE
  #RENUMBER SAGE LINE NUMBER For THE SORTED BUSINES TRANSACTIONS LINES
  Local Char QUERY(255)(0..4)
  Local Integer I
  # QUERY WILL WORK IN TEMP TABLE To RE-Order THE DATA
  I = 0

  QUERY(0) = "SET NOCOUNT ON"
  QUERY(1) -= "DECLARE @RETURNVAL VARCHAR(255) = '';"
  QUERY(2) -= "EXEC [BB_VALSORT] '"+VALEUR+"', @RETURNVAL OUTPUT"
  QUERY(3) -= "SELECT @RETURNVAL as RETVAL"

  For (Char RETVAL) From "5" Sql QUERY As [YLNK]
    If RETVAL = "Passed" Then
      I = 1
    Else
      I = 0
    Endif
  Next
  If I = 0 Then
    GMESSAGE = mess(17,6254,1)-"Transaction number sorting"
    GERR = 1
    mkstat = 2
    End
  Endif

  #CALCULATE GST FOREACH BUSINES TRANSACTION LINE
#  CALCULATE GST ON EACH LINE By THE ENGINE RULES
#  I.E. If BATCH type IS Inter ENTITY
#  A)  CHECK To SEE If COMPANIES ARE IN THE SAME GST GROUP
#    If SO, Update GST Field = 0, AMT + GST = AMOUNT
#TAX CODE = EXM and CHANGE DOCUMENT type To BBGIE & JOURNAL type To BBGIE (GROUP GST) – this DOCUMENT type WILL HAVE VAT ON DEBIT DISABLED, SO WILL not BE INCLUDED IN GST REPORTING.

  Local Integer J : J = 0
  Local Decimal YGSTAMT
  #Open Tables
  If clalev([F:YBBH]) = 0 : Local File YBBHEADER    [YBBH]  : Endif
  If clalev([F:YBDT]) = 0 : Local File YBBDETAILTEM [YBDT]  : Endif
  If clalev([F:TVT])  = 0 : Local File TABVAT       [TVT]   : Endif
  If clalev([F:GTE])  = 0 : Local File GTYPACCENT   [GTE]   : Endif

  Read [F:YBDT]YBDT0 = VALEUR
  Infbox "VALEUR"-VALEUR
  For [F:YBDT] Where [F:YBDT]YBATNBR = VALEUR
    #BASED UPON THE TAX CODE CALCULATE THE GST AMOUNT Using THE DEBIT/CREDIT AMOUNT
    #Get VAT and VAT Rates for GST Amount
    Read [F:TVT]TVT1 = [F:YBDT]YTAX
    YGSTAMT = [F:TVT]VATRAT
    #Update THE GST AMOUNT With THE NEWLY CALCULATE GST Value
    [F:YBDT]YGSTAMT = YGSTAMT
    #Update THE AMOUNT + TAX Field With THE DEBIT/CREDIT AMOUN + GST AMOUNT
    If [F:TVT]VATRAT <> 0 Then
      If [F:YBDT]YDEB <> 0 : [F:YBDT]YAMTTAX = [F:YBDT]YDEB + YGSTAMT : Endif
      If [F:YBDT]YCDT <> 0 : [F:YBDT]YAMTTAX = [F:YBDT]YCDT + YGSTAMT : Endif
    Endif
    If fstat = 0
      Rewrite [F:YBDT]
      #Commit
    Else
      GMESSAGE = mess(18,6254,1)-"GST Calculation Update. Transaction rolled back."
      GERR = 1
      mkstat = 2
      J = 0
      Break
    Endif
    #TODO: Requires expansion - START
    #VALIDATE BUSINESS TRANSACTION ENTERED VALUES
    #TODO: Requires expansion - END
    #If BUSINESS TRANSACTION IS VALID Then
    Read [F:GTE]GTE0 = [F:YBDT]YENTTYP #Case BUSINESS TRANSACTION type
    If [F:GTE]YBUSBATTYP = 1 Then #IE

    Elsif [F:GTE]YBUSBATTYP = 2 Then #Cash

    Elsif [F:GTE]YBUSBATTYP = 3 Then #Journal

    Endif
    J += 1
  Next
  Infbox num$(J)
  Read [F:YBBH]YBBH0 = VALEUR
  If J = 0 Then
    #SET THE BATCH status To “ERRORS” (3)
    [F:YBBH]YBATSTA = 3
  Else
    #SET THE BATCH status To “VALIATED” (2)
    [F:YBBH]YBATSTA = 2
  Endif
  If fstat = 0 Then
    Rewrite [F:YBBH]
    #Commit
  Else
  #[V]CST_AERROR
  # 0 THE Rewrite OPERATION SUCCEEDED.
  # 1 THE LINE IS LOCKED.
  # 2 With >= or <= MODE, THE Key FOUND WAS not EQUAL To THE Value GIVEN.
  # 3 AN ATTEMPT OF THE CREATION OF A DUPLICATE Key Value WAS DONE.
  # 4 BEGIN or End OF TABLE REACHED.
  # 5 LINE CORRESPONDING To THE Key Value not FOUND.
  # 7 CLASS DOES not EXIST (NO TABLE OPENED With THE CORRESPONDING ABBREVIATION).
  # 8 THE NUMBER OF VALUES GIVEN, or THE NUMBER OF SEGMENTS INDICATED, EXCEEDS THE NUMBER OF SEGMENTS OF THE Key.
  # 21 THE Key DOES not EXIST.
  # 22 INCORRECT Read MODE.
  # 32 TRANSACTION STARTED At A HIGHER LEVEL OF THE NESTING Call
  # 48 NO TRANSACTION IN PROGRESS.
    GMESSAGE = mess(18,6254,1)-[V]CST_AERROR
    Rollback
    End
  Endif

  Affzo [M:YBB0]
  Affzo [M:YBB1]
  Affzo [M:YBB2]
  Affzo [M:YBB3]

End

$PST_BUSBAT
  Infbox("Posted")
Return

**********
7,"TRT","SPEYBBVAL",""
8,"Patch DFC :DFCX1-142 on October   04,18 10: 58"
